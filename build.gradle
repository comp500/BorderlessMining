plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'

	id "com.github.breadmoirai.github-release" version "2.2.12"
	id "org.ajoberstar.grgit" version "4.1.0"
	id "com.modrinth.minotaur" version "1.2.1"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

String getGitVersion(Project project) {
	if (grgit != null) {
		var dirty = grgit.status().clean ? "" : "-dirty"
		if (grgit.describe(tags: true) == "${project.mod_version}+${project.minecraft_version}") {
			return "${project.mod_version}+${project.minecraft_version}${dirty}"
		} else {
			return "${project.mod_version}-dev.${grgit.head().abbreviatedId}+${project.minecraft_version}${dirty}"
		}
	} else {
		return "${project.mod_version}-dev.unknown+${project.minecraft_version}"
	}
}

String getChangelog(String githubUrl) {
	// Get changes since the last tag
	return grgit.log(includes: ["HEAD"], excludes: [
			// Get the last tag, removing the number of commits since the tag and the current HEAD~ hash
			grgit.describe(commit: "HEAD~", tags: true).replaceAll("-\\d+-[a-z0-9]+\$", "")
	]).collect {
		"- ${it.shortMessage} (${it.author.name})"
	}.join("\n") + (githubUrl == null ? "" : "\n\nSee the full changes on Github: ${githubUrl}commits/${grgit.describe(tags: true)}")
}

archivesBaseName = project.archives_base_name
version = getGitVersion(project)
group = project.maven_group

repositories {
    maven { url "https://maven.terraformersmc.com/" }
    maven { url "https://api.modrinth.com/maven" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API for testing
	modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Bundle fabric-resource-loader-v0 for the config GUI
	modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
	include(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc.fabric-loader")
    }

    // Sodium-Implementation for compatibility
    modImplementation "maven.modrinth:sodium:${project.sodium_version}"
}

loom {
	accessWidenerPath = file("src/main/resources/borderlessmining.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

if (System.getenv("GITHUB_TOKEN")) {
	githubRelease {
		owner = project.github_repo_user
		repo = project.github_repo_name
		tagName = project.version
		releaseName = "Release ${project.version}"
		targetCommitish = "1.19"
		draft = false
		body = getChangelog(null)
		token System.getenv("GITHUB_TOKEN")
		releaseAssets.from(remapJar)
		overwrite = true
	}

	publish.dependsOn(tasks.githubRelease)
}

import com.modrinth.minotaur.TaskModrinthUpload
// TODO: infer from fabric.mod.json?!
def supportedVersions = ["1.19"]
def versionSupportName = "(Fabric/Quilt 1.19)"

task publishModrinth(type: TaskModrinthUpload) {
	dependsOn remapJar
	onlyIf {
		System.getenv("MODRINTH_TOKEN")
	}

	token = System.getenv("MODRINTH_TOKEN")
	projectId = project.modrinth_id
	versionNumber = project.version
	uploadFile = remapJar
	for (version in supportedVersions) {
		addGameVersion(version)
	}
	addLoader("fabric")
	addLoader("quilt")
	detectLoaders = false
	versionName = project.mod_version + " " + versionSupportName
	changelog = getChangelog(project.github_url)
}

publish.dependsOn(publishModrinth)

if (System.getenv("CURSEFORGE_TOKEN")) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
		project {
			id = project.curseforge_id
			releaseType = "release"

			mainArtifact(remapJar) {
				displayName = project.mod_version + " " + versionSupportName
			}
			for (version in supportedVersions) {
				addGameVersion(version)
			}
			addGameVersion("Fabric")
			addGameVersion("Quilt")
			changelog = getChangelog(project.github_url)
			changelogType = "markdown"
		}
	}

	publish.dependsOn(tasks.named("curseforge"))
}